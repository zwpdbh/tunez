defmodule Tunez.Repo.Migrations.AddAiChat do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:messages, primary_key: false) do
      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :text, :text, null: false
      add :tool_calls, {:array, :map}
      add :tool_results, {:array, :map}
      add :source, :text, null: false, default: "user"
      add :complete, :boolean, null: false, default: true
      add :conversation_id, :uuid, null: false
      add :response_to_id, :uuid
    end

    create table(:conversations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:messages) do
      modify :conversation_id,
             references(:conversations,
               column: :id,
               name: "messages_conversation_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :response_to_id,
             references(:messages,
               column: :id,
               name: "messages_response_to_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:conversations) do
      add :title, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "conversations_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end
  end

  def down do
    drop constraint(:conversations, "conversations_user_id_fkey")

    alter table(:conversations) do
      remove :user_id
      remove :updated_at
      remove :inserted_at
      remove :title
    end

    drop constraint(:messages, "messages_conversation_id_fkey")

    drop constraint(:messages, "messages_response_to_id_fkey")

    alter table(:messages) do
      modify :response_to_id, :uuid
      modify :conversation_id, :uuid
    end

    drop table(:conversations)

    drop table(:messages)
  end
end
